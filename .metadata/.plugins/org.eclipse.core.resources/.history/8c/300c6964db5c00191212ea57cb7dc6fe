package GUI;
import dataAccess.BorrowedBooksAccess;
import java.awt.EventQueue;
import bll.AuthorRecommendation;
import bll.Book;
import bll.Customer;
import bll.GenreRecommendation;
import bll.PopularRecommendation;
import bll.Recommendation;
import bll.RecommendationFactory;
import bll.TitleRecommendation;
import dataAccess.BookAccess;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.awt.*;



public class GUILogInCustomer {
	private JFrame frame;
	private JButton returnB;
	private JButton borrow;
	private JCheckBox filterGenre;
	private JCheckBox filterTitle;
	private JCheckBox filterAuthor;
	private JCheckBox filterReleaseDate;
	private JCheckBox popular;
	private JLabel filter;
	private JTextField textField;
	private JButton ok;
	private Model.Customer customer;

	//String[] filterString = {"title", "author", "genre", "release date"};
	//@SuppressWarnings({ "unchecked", "rawtypes" })
	//JComboBox filterChoice = new JComboBox(filterString);

	
	public GUILogInCustomer(){
		frame = new JFrame("USER");
		
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(800,800);
		frame.setLayout(null);
	
		borrow = new JButton("Borrow books");
		returnB = new JButton("Return books");
		textField = new JTextField("");
		filterGenre = new JCheckBox("Genre");
		filter = new JLabel("Filer by: ", JLabel.RIGHT);
		filterTitle = new JCheckBox("Title");
		filterAuthor = new JCheckBox("Author");
		filterReleaseDate = new JCheckBox("Release Date");
		popular = new JCheckBox("Popular");
		ok = new JButton("Apply");


		
		borrow.setBounds(160,20,150,30);
		filter.setBounds(60,140,50,50);
		returnB.setBounds(160, 80, 150, 30);
		//recomandation.setBounds(120, 140, 150, 30);
		filterGenre.setBounds(110, 150, 60, 30);
		textField.setBounds(220, 190, 150, 30);
		filterTitle.setBounds(170, 150, 50, 30);
		filterAuthor.setBounds(220, 150, 70, 30);
		filterReleaseDate.setBounds(290,150, 100, 30 );
		popular.setBounds(390, 150, 90, 30);
		ok.setBounds(190, 230, 90, 30);
		
		borrow.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				BorrowedBooksAccess b = new BorrowedBooksAccess();
				//int id = customer.getId();
				 ArrayList<String> s = b.getBooksByUser(6);
				 for(String ss:s){
			            System.out.println(ss);
			}}
		});
		
		ok.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				if(filterGenre.isSelected()){
					String s = textField.getText();
					RecommendationFactory recFac = new RecommendationFactory();
					Recommendation rec = recFac.getRecommentations("genre");
					//BookAccess b = new BookAccess();
					ArrayList<Model.Book> books = rec.getReccomendation(s);
					Book bb = new Book();
					bb.getAllBooks(rec.getReccomendation(s));
					for(Model.Book b: books){
						 System.out.println(b.getTitle() + " " + b.getAuthor() + " " + b.getAvailable()+ " " + b.getReleaseDate());}

					}
				else if (filterAuthor.isSelected()){
					String s = textField.getText();
					RecommendationFactory recFac = new RecommendationFactory();
					Recommendation rec = recFac.getRecommentations("author");
					//BookAccess b = new BookAccess();
					ArrayList<Model.Book> books = rec.getReccomendation(s);
					Book bb = new Book();
					bb.getAllBooks(rec.getReccomendation(s));
					for(Model.Book b: books){
						 System.out.println(b.getTitle() + " " + b.getAuthor() + " " + b.getAvailable()+ " " + b.getReleaseDate());
					}
       
				}
				else if (filterTitle.isSelected()){
					String s = textField.getText();
					RecommendationFactory recFac = new RecommendationFactory();
					Recommendation rec = recFac.getRecommentations("title");
					//BookAccess b = new BookAccess();
					ArrayList<Model.Book> books = rec.getReccomendation(s);
					Book bb = new Book();
					bb.getAllBooks(rec.getReccomendation(s));
					for(Model.Book b: books){
						 System.out.println(b.getTitle() + " " + b.getAuthor() + " " + b.getAvailable()+ " " + b.getReleaseDate());
					}
				}
				else if (popular.isSelected()){
					String s = textField.getText();
					RecommendationFactory recFac = new RecommendationFactory();
					Recommendation rec = recFac.getRecommentations("popular");
					//BookAccess b = new BookAccess();
					ArrayList<Model.Book> books = rec.getReccomendation(s);
					Book bb = new Book();
					bb.getAllBooks(rec.getReccomendation(s));
					for(Model.Book b: books){
						 System.out.println(b.getTitle() + " " + b.getAuthor() + " " + b.getAvailable()+ " " + b.getReleaseDate());
					}
				}
			}
	
		});
		
			
		frame.add(filter);
		frame.add(borrow);
		frame.add(returnB);
		frame.add(filterGenre);
		frame.add(textField);
		frame.add(filterTitle);
		frame.add(filterAuthor);
		frame.add(filterReleaseDate);
		frame.add(popular);
		frame.add(ok);
		frame.setVisible(true);
	}
}
